datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Catgory {
  id   String @id @default(uuid())
  name String

  Companions Companion[]
}

// String -> VARCHAR de 65.535 bytes
// @db.Text -> TEXT de 4.294.967.295 bytes 
model Companion {
  id           String @id @default(uuid())
  userId       String
  userName     String
  src          String
  description  String
  name         String @db.Text // se indica que el campo de la base de datos es de tipo TEXT
  instructions String @db.Text
  seed         String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   Catgory   @relation(fields: [categoryId], references: [id])
  categoryId String
  messages   Message[]

  @@index([categoryId]) //this is to create index on categoryId, because it is a foreign key
  @@fulltext([name]) //this is to create fulltext index on name to enable fulltext search
}

// Role enum is defining a custom enumerated type in the database the different roles that a user can have
// then we use it to define fields that references a user's role 
// this ensures that only valid roles are used in the system
// better readabale and maintainable code
enum Role {
  user
  system
}

model Message {
  id        String   @id @default(uuid())
  role      Role
  content   String   @db.VarChar(5000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companionId String
  userId      String

  companion Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)

  @@index([companionId])
}

model UserSubscription {
  id                     String    @id @default(uuid())
  userId                 String    @unique
  //use different names for your fields in your Prisma schema than the actual column names in the database
  StripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  StripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  StripePriceId          String?   @unique @map(name: "stripe_price_id")
  StripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}
